gateway_section_control:
  id: section_dp_gateway_interface
  description: >
    Gateway interface for Section DP.
    Manages input/output binding, toolkit result injection,
    signal dispatching, and progress tracking.
  linked_to: callbox_central_dispatch
  section_id: section_dp


gateway_callbox_hub:
  id: callbox_central_dispatch
  description: >
    Centralized gateway communication hub. Handles signal routing, tool triggers,
    section callouts, and cross-section data interactions.

  accepted_signals:
    - "10-4"
    - "10-9"
    - "10-10"
    - "10-6"
    - "10-8"

  on_signal:
    - if signal == "10-4":
        action:
          - unlock_next_section: true
          - log: "Signal 10-4: Section approved. Unlocked next section."

    - if signal == "10-9":
        action:
          - trigger_manual_review: true
          - log: "Signal 10-9: Routing to manual override."

    - if signal == "10-10":
        action:
          - freeze_gateway: true
          - notify: [lead_investigator]
          - log: "Signal 10-10: Gateway frozen per operator command."

    - if signal == "10-6":
        action:
          - broadcast_toolkit_context: true
          - log: "Toolkit initialized and dispatched to sections."

    - if signal == "10-8":
        action:
          - collect_output_payload
          - store_progress_flags
          - log: "Section reported complete. Gateway updated."

  fallback_logic:
    on_unrecognized_signal:
      - log: "Unknown signal received."
      - notify_admin: true

    on_timeout:
      - wait_duration: 48h
      - escalate_to: lead_investigator
      - log: "Callbox timeout. No response received in window."

callbox_endpoints:
  section_cp: "section_cp_response_handler"
  section_toc: "section_toc_response_handler"
  section_1: "section_1_response_handler"
  section_2: "section_2_response_handler"
  section_3: "section_3_response_handler"
  section_4: "section_4_response_handler"
  section_5: "section_5_response_handler"
  section_6: "section_6_response_handler"
  section_7: "section_7_response_handler"
  section_8: "section_8_response_handler"
  section_dp: "section_dp_response_handler"
  section_fr: "section_fr_response_handler"


section_transmission_check:
  id: section_{{ section_number }}_transmission_verification
  description: >
    Validates outbound toolkit signals were received by the callbox.
    Performs echo check and readiness confirmation loop.
section_dp_toolkit_signal_emitter:
  sends:
    - to: callbox
  emit_signals:
    - signal: "section_completed"
      payload:
        origin: "section_dp"
        summary: "{{ generated_summary }}"
        flags: "{{ section_flags }}"
    - signal: "ready_for_next"
      payload:
        from: "section_dp"
    - log: "section_dp dispatched completion signal to callbox."

gateway_signal_interpreter:
  on_toolkit_ready:
    - verify_payload
    - emit_signal: "toolkit_acknowledged"
      payload:
        section: "{{ incoming_signal.from }}"
        status: "confirmed"
    - log: "Toolkit ready signal acknowledged for {{ incoming_signal.from }}."

unified_toolkit_dispatch:
  id: master_toolkit_trigger
  description: >
    Calls the unified Python toolkit engine before each section report.
    Runs all tools (billing, continuity, metadata, etc.) and stores output.

  trigger_on: section_entry

  on_entry:
    - log: "Section_{{ section_number }} wake-up initiated."
    - fetch:
        - section_context.unified_results
        - report_meta
        - assigned_documents
        - previous_section.flags
    - apply_context:
        unified_results: "{{ section_context.unified_results }}"
        report_meta: "{{ report_meta }}"
        assigned_documents: "{{ assigned_documents }}"
        section_flags: "{{ previous_section.flags }}"
    - emit_signal:
        signal: "wake_up_call"
        payload:
          from: "section_{{ section_number }}"
          status: "initiated"
    - log: "Section_{{ section_number }} context loaded and wake-up signal emitted."

  action:
    - python_call:
        module: tools.master_toolkit_engine
        class: MasterToolKitEngine
        method: run_all
        inputs:
          section_id: "{{ current_section }}"
          text_data: "{{ section_text }}"
          report_meta: "{{ report_metadata }}"
          documents: "{{ document_set }}"
          assets: "{{ media_assets }}"
        store_as: unified_results

    - store_output:
        context_key: section_context.unified_results
    - log: "Unified toolkit analysis complete and results stored for reporting."

  on_failure:
    - if toolkit_run.failed:
        emit_signal: "10-10"
        log: "Toolkit failed. Section halted."
        escalate: lead_investigator

toolkit_endpoints:
  section_cp: "section_cp_response_handler"
  section_toc: "section_toc_response_handler"
  section_1: "section_1_response_handler"
  section_2: "section_2_response_handler"
  section_3: "section_3_response_handler"
  section_4: "section_4_response_handler"
  section_5: "section_5_response_handler"
  section_6: "section_6_response_handler"
  section_7: "section_7_response_handler"
  section_8: "section_8_response_handler"
  section_dp: "section_dp_response_handler"
  section_fr: "section_fr_response_handler"

logic_switches:
  - if report_type == "Investigative":
      section_dp: "Disclosure Page"

  - if report_type == "Surveillance":
      section_dp: "Disclosure Page"

  - if report_type == "Hybrid":
      section_dp: "Disclosure Page"

section_dp_toolkit_handler:
  on_entry:
    - run_tools:
        tools:
          - cochran_match_tool
          - northstar_protocol_tool
          - reverse_continuity_tool
          - metadata_tool_v_5
          - mileage_tool_v_2
        input:
          section_id: section_dp
          text_data: "{{ section_text }}"
          meta: "{{ report_meta }}"
          docs: "{{ assigned_documents }}"
          media: "{{ media_assets }}"
        store_as: section_toolkit_results
    - log: "Section_DP tools executed."

  on_failure:
  on_failure:
    - if toolkit_run.failed:
        emit_signal: "10-10"
        log: "Toolkit failed. Section halted."
        escalate: lead_investigator

section_dp_toolkit_emitter:
  sends:
    - to: callbox
  emit_signals:
    - signal: "toolkit_ready"
      payload:
        from: "section_dp"
        tools_used:
          - cochran_match_tool
          - northstar_protocol_tool
          - reverse_continuity_tool
          - metadata_tool_v_5
          - mileage_tool_v_2
    - log: "section_dp emitted toolkit ready signal."

section_dp_toolkit_guard:
  on_entry:
    - fetch_manifest:
        from: "section_dp"
        key: "toolkit_manifest.section_dp"
        store_as: allowed_tools

    - validate_access:
        allowed: "{{ allowed_tools }}"
        attempted: "{{ tools_requested }}"
        on_violation:
          - emit_signal: "10-9"
          - log: "Unauthorized tool access in section_dp."

section_dp_toolkit_ready:
  trigger_on: section_output_received
  steps:
    - wait_for: toolkit_result
    - emit_signal:
        signal: "10-6"
        payload:
          tools_ready: true
          section_id: "{{ current_section }}"
    - wait_for_signal:
        toolkit.10-4:
          action: continue
          log: "Gateway acknowledged toolkit readiness."
    - log: "Toolkit acknowledgment loop complete."
  logic:
    - if signal == "10-4":
        action:
          - unlock_next_section: true
          - log: "Approval received. Advancing to next section."

    - if signal == "10-9":
        action:
          - reroute_to_section_editor: "{{ previous_section }}"
          - log: "Section flagged for revision. Returning to previous section."

    - if signal == "10-10":
        action:
          - freeze_gateway: true
          - notify_roles: [lead_investigator]
          - log: "Critical halt triggered. Investigation suspended."

        fallback:
          - on_missing_signal:
        notify_roles: [qa_admin]
        log: "No response signal after section output. Manual review required."


gateway_tool_port_media:
  id: media_entry_port
  description: >
    Manages entry, verification, tagging, and linking of photo/video evidence.
    Requires user to assign narrative before toolkit triggers.

  accepted_inputs:
    - media_upload
    - section_reference
    - metadata_tags
    - user_narrative_link

  compliance_rules:
    - require_narrative_link == true
    - no auto-generated content allowed
    - audit_user_id == true

  on_upload:
    - verify_media_format
    - check_for_user_prompt
    - emit_signal: "media_attached"
      payload:
        section_id: "{{ section_reference }}"
        media_type: "{{ media_type }}"
        tags: "{{ metadata_tags }}"
    - log: "Media linked and approved by investigator."

  on_violation:
    - reject_upload
    - notify_user: "Narrative required before media linkage is allowed."

gateway_tool_port_documents:
  id: document_archive_port
  description: >
    Central archive for supporting documents. Ensures validation before linkage.
    Maintains audit logs for compliance.
gateway_tool_port_export:
  id: export_dispatch_port
  description: >
    Controls generation and secure delivery of finalized reports.
    Ensures final review was completed before exporting.

  preconditions:
    - section_lifecycle_complete == true
    - final_review_approved == true
    - compliance_clearance_passed == true

  accepted_requests:
    - export_type: ["pdf", "zip", "summary_only"]
    - delivery_target: ["client", "internal", "secure_archive"]

  on_export:
    - generate_package
    - emit_signal: "report_ready_for_delivery"
      payload:
        export_link: "{{ secure_url }}"
        type: "{{ export_type }}"
        recipient: "{{ delivery_target }}"
    - log: "Export complete and dispatched."

  on_blocked:
    - notify_user: "Cannot export. Final approval or lifecycle check not completed."

  accepted_inputs:
    - document_file
    - classification_tag
    - section_reference
    - user_confirmation

  validation_rules:
    - must_include_classification_tag
    - file_integrity_verified
    - user_role_allowed_to_upload == true

  on_document_link:
    - store_in_repository
    - emit_signal: "document_attached"
      payload:
        document_id: "{{ file_id }}"
        section_linked: "{{ section_reference }}"
    - log: "Document uploaded and approved for section {{ section_reference }}."

  on_reject:
    - notify_user: "Document missing classification or failed verification."

  toc_identifier: "{{ report_type | lower }}_toc"


section_handoff_router:
  id: section_handoff_controller
  description: >
    Coordinates lifecycle transitions between sections.
    Validates output, interprets gateway signals, and activates next section or returns for revision.

section_dp_input:
  receives_from:
    - gateway
    - previous_section
  requires:
    - section_context.unified_results
    - report_meta
    - assigned_documents
    - section_flags
  initialize:
    - load_toolkit_results: "{{ section_context.unified_results }}"
    - apply_report_meta: "{{ report_meta }}"
    - verify_required_docs: "{{ assigned_documents }}"
    - inherit_flags: "{{ section_flags }}"

section_dp_response_handler:
  receives:
    - from: callbox
    - accepted_signals:
        - "section_update"
        - "callback_confirmed"
        - "override_request"
  on_signal:
    - if signal == "section_update":
        update_context:
          key: section_context.sync
          value: "{{ signal_payload }}"
        log: "section_dp" synced with gateway payload."

    - if signal == "callback_confirmed":
        set_flag: section_validated
        log: "section_dp" confirmed by central callbox."

    - if signal == "override_request":
        trigger_manual_review: true
        log: "Manual review trigger set by callbox directive."

section_dp_output:
  sends_to:
    - gateway
    - next_section
  emits:
    - signal: "section_completed"
      condition: if section_valid == true
    - payload:
        section_summary: "{{ generated_summary }}"
        flags: "{{ generated_flags }}"
        context: "{{ section_context }}"
    - log: "Section {{ current_section }} completed. Output dispatched to gateway."

gateway_section_dp_input_hooks:
  id: gateway_section_loader_1
  description: Injects toolkit data and context into section_1 on entry.
  on_section_entry:
    - fetch: section_context.unified_results
    - fetch: report_meta
    - fetch: assigned_documents
    - fetch: previous_section.flags
    - apply_to_section:
        context_key: unified_results
        data_key: section_context.unified_results
    - log: "Section entry: Context injected for section_1"

gateway_section_dp_output_hooks:
  id: gateway_section_dispatcher_dp
  description: Captures section_dp output and routes updates.
  on_section_exit:
    - capture:
        - section_summary
        - flags
        - updated_context
    - store:
        section_flags: "{{ flags }}"
        report_progress: "{{ section_summary }}"
    - emit_signal: "section_received"
      payload:
        section_id: "section_dp"
        status: "acknowledged"
    - log: "Gateway received and acknowledged output from section_2."

section_signal_lifecycle_template:
  on_start:
    - emit_signal: "10-6"  # Toolkit dispatched
      log: "Toolkit deployment initiated for {{ current_section }}."

 report_generation:
    - run: generate_report_section
    - log: "Report generation initiated for {{ current_section }}."

authenticity_disclosure_page:
  layout:
    show_title: false
    font_family: "Times New Roman"
    font_size: 9pt
    font_style: "normal"
    text_align: "justified"
    spacing:
      before: 2em
      after: 1em
    content_block_order:
      - logo
      - authenticity_statement
      - signature
      - disclosure_text

  logo:
    display: true
    alignment: center
    source: "DKI_services_logo.png"

  authenticity_statement:
    text: >
      The above statements are true and honest to the best of my knowledge, to the best of my ability, available information, services, and by the trusted individuals I partner with. The statements made herein are recorded on [finalized_date_formatted].
    finalized_date:
      source: "System Lock Protocol"
      format: "dddd, MMMM D, YYYY"
      locked: true
      override:
        required: true
        justification: true
        metadata_logging: true
    alignment: center

  signature:
    display: true
    alignment: center
    source: "DKI_signature.png"

  disclosure_text:
    display: true
    box_border: true
    alignment: justified
    spacing_top: 1em
    paragraphs:
      - "The documents included with this report include, but are not limited to: the client contract, the new client intake form, the final report, and the comprehensive report on the subjects. The combination of these documents is to be supplied to the client and handled as sensitive and private information. Please keep the results private and in a secure location, as sensitive information is included within the documents. Neither I, David Krashin, nor DKI Services LLC is responsible if any or all of these documents are mishandled, lost, stolen, or used in an inappropriate manner."
      - "I, David Krashin of DKI SERVICES LLC, do not portray or identify myself as a lawyer or attorney, nor do I offer any legal advice on any case. The following statements are none other than the perception and collection of details, facts [to the best of my knowledge], and records of this specific case. The facts and records found in this report are subject to change without notice. They are also MY THOUGHTS, not facts, that I perceive are likely based upon the events I have witnessed in multiple cases throughout my career. These statements are not a record of fact and should not be regarded as such. I strongly encourage every client to confer with a legal representative and adhere to their legal counsel pending the review of this investigation."



report_ready:
  - wait_for: report_generated
  - emit_signal: "10-8"
    payload:
      section_summary: "{{ generated_summary }}"
      flags: "{{ generated_flags }}"
    log: "Report complete. Output dispatched to gateway."

gateway_review_outro:
  on_section_render_complete:
    - receive:
        source: "section_dp"
        payload:
          rendered_report: "{{ section_report }}"
          toolkit_flags: "{{ generated_flags }}"
          summary: "{{ section_summary }}"
    - log: "Section section_dp submitted report to gateway for review."

  review_phase:
    - present_to_user:
        content: "{{ section_report }}"
        flags: "{{ generated_flags }}"
        summary: "{{ section_summary }}"
        prompt: "Approve this section report?"
        options: [yes, no, halt, suggest_changes]

    - wait_for_user_input:
        cases:
          - match: "yes"
            steps:
              - emit_signal: "10-4"
                payload:
                  section: "section_dp"
                  status: "approved"
              - forward_to: section_fr
                content: "{{ section_report }}"
              - log: "Report approved and forwarded to FR."

          - match: "no"
            steps:
              - emit_signal: "10-9"
                payload:
                  section: "section_dp"
                  status: "revision_required"
              - reroute_to: "section_dp"
              - log: "Revision requested. Sent back to section."

          - match: "halt"
            steps:
              - emit_signal: "10-10"
                log: "Hard stop requested by user. Gateway frozen."
              - freeze_gateway: true
              - notify_roles: [lead_investigator]

          - match: "suggest_changes"
            steps:
              - capture_feedback:
                  field: user_suggestions
              - emit_signal: "10-9"
                payload:
                  section: "section_dp"
                  status: "user_comments_added"
                  comments: "{{ user_suggestions }}"
              - reroute_to: "section_dp"
              - log: "User submitted suggestions. Returned to section with feedback."

  fallback:
    - on_timeout: 48h
      notify_roles: [qa_admin, lead_investigator]
      log: "Review timeout. Manual escalation triggered."

    - on_invalid_input:
        log: "Unexpected input during section_dp review."
        notify: admin


